package com.lancer.passwordhelper.ui.activity.videoimport android.app.Activityimport android.content.Intentimport android.content.res.Configurationimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.os.Parcelableimport android.widget.ImageViewimport androidx.lifecycle.ViewModelProviderimport com.gyf.immersionbar.ImmersionBarimport com.lancer.passwordhelper.InjectorUtilimport com.lancer.passwordhelper.Rimport com.lancer.passwordhelper.base.BaseActivityimport com.lancer.passwordhelper.databinding.ActivityVideoBindingimport com.lancer.passwordhelper.extension.loadimport com.lancer.passwordhelper.model.bean.*import com.shuyu.gsyvideoplayer.GSYVideoManagerimport com.shuyu.gsyvideoplayer.listener.GSYSampleCallBackimport com.shuyu.gsyvideoplayer.utils.OrientationUtilsimport com.shuyu.gsyvideoplayer.video.base.GSYVideoPlayerimport kotlinx.android.parcel.Parcelizeclass VideoActivity : BaseActivity<ActivityVideoBinding>() {    private var orientationUtils: OrientationUtils? = null    private val viewModel by lazy {        ViewModelProvider(this, InjectorUtil.getVideoViewModelFactory())            .get(VideoViewModel::class.java)    }    override fun initView() {        getBundles()    }    override fun setStatusBarColor() {        ImmersionBar.hideStatusBar(window)    }    private fun getBundles() {        if (intent.getParcelableExtra<VideoInfo>(EXTRA_VIDEO_INFO) != null)            viewModel.videoInfoData = intent.getParcelableExtra(EXTRA_VIDEO_INFO)        if (intent.getLongExtra(EXTRA_VIDEO_ID, 0L) != 0L)            viewModel.videoId = intent.getLongExtra(EXTRA_VIDEO_ID, 0L)    }    override fun initData() {        orientationUtils = OrientationUtils(this, binding.videoPlayer)        startVideoPlayer()    }    private fun startVideoPlayer() {        viewModel.videoInfoData?.run {            binding.videoPlayer.startPlay()        }    }    private fun GSYVideoPlayer.startPlay() {        viewModel.videoInfoData?.let {            //设置全屏按键功能,这是使用的是选择屏幕，而不是全屏            fullscreenButton.setOnClickListener { showFull() }            //防止错位设置            playTag = TAG            //音频焦点冲突时是否释放            isReleaseWhenLossAudio = false            //增加封面            val imageView = ImageView(this@VideoActivity)            imageView.scaleType = ImageView.ScaleType.CENTER_CROP            imageView.load(it.cover.detail)            thumbImageView = imageView            thumbImageView.setOnClickListener {                //switchTitleBarVisible()            }            //是否开启自动旋转            isRotateViewAuto = false            //是否需要全屏锁定屏幕功能            isNeedLockFull = true            //是否可以滑动调整            setIsTouchWiget(true)            //设置触摸显示控制ui的消失时间            dismissControlTime = 5000            //设置播放过程中的回调            setVideoAllCallBack(VideoCallPlayBack())            //设置播放URL            setUp(it.playUrl, false, it.title)            //开始播放            startPlayLogic()        }    }    inner class VideoCallPlayBack : GSYSampleCallBack() {        override fun onStartPrepared(url: String?, vararg objects: Any?) {            super.onStartPrepared(url, *objects)//            binding.flHeader.gone()//            binding.llShares.gone()        }        override fun onClickBlank(url: String?, vararg objects: Any?) {            super.onClickBlank(url, *objects)            // switchTitleBarVisible()        }        override fun onClickStop(url: String?, vararg objects: Any?) {            super.onClickStop(url, *objects)            // delayHideBottomContainer()        }        override fun onAutoComplete(url: String?, vararg objects: Any?) {            super.onAutoComplete(url, *objects)//            binding.flHeader.visible()//            binding.ivPullDown.visible()//            binding.ivCollection.gone()//            binding.ivShare.gone()//            binding.ivMore.gone()//            binding.llShares.visible()        }    }    private fun showFull() {        orientationUtils?.run { if (isLand != 1) resolveByClick() }        binding.videoPlayer.startWindowFullscreen(this, actionBar = true, statusBar = false)    }    /**     *     */    override fun onNewIntent(intent: Intent?) {        super.onNewIntent(intent)        setIntent(intent)        getBundles()        startVideoPlayer()    }    override fun onPause() {        super.onPause()        binding.videoPlayer.onVideoPause()    }    override fun onResume() {        super.onResume()        binding.videoPlayer.onVideoResume()    }    override fun onDestroy() {        super.onDestroy()        GSYVideoManager.releaseAllVideos()        orientationUtils?.releaseListener()        binding.videoPlayer.release()        binding.videoPlayer.setVideoAllCallBack(null)    }    override fun onBackPressed() {        orientationUtils?.backToProtVideo()        if (GSYVideoManager.backFromWindowFull(this)) return        super.onBackPressed()    }    override fun onConfigurationChanged(newConfig: Configuration) {        super.onConfigurationChanged(newConfig)        binding.videoPlayer.onConfigurationChanged(this, newConfig, orientationUtils, true, true)    }    companion object {        const val TAG = "NewDetailActivity"        const val EXTRA_VIDEO_INFO = "videoInfo"        const val EXTRA_VIDEO_ID = "videoId"        fun start(context: Activity, videoInfo: VideoInfo) {            val starter = Intent(context, VideoActivity::class.java)            starter.putExtra(EXTRA_VIDEO_INFO, videoInfo)            context.startActivity(starter)//            context.overridePendingTransition(R.anim.anl_push_bottom_in, R.anim.anl_push_up_out)        }        fun start(context: Activity, videoId: Long) {            val starter = Intent(context, VideoActivity::class.java)            starter.putExtra(EXTRA_VIDEO_ID, videoId)            context.startActivity(starter)//            context.overridePendingTransition(R.anim.anl_push_bottom_in, R.anim.anl_push_up_out)        }    }    override fun initLayout(): Int = R.layout.activity_video}